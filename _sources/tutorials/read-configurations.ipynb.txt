{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reading atoms from configuration files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "MDMC enables reading atomic configurations and topologies (if included) from configuration files.\n",
    "\n",
    "The implemented file formats are:\n",
    "\n",
    "- [Crystallographic Information File](https://www.iucr.org/resources/cif/documentation) (CIF)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In theory, it is possible to read a configuration file by simply passing it to the `read` function, as MDMC will determine the file format from the extension, if it is a supported format:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "../../MDMC/trajectory_analysis/observables/SQw.py:490: NumbaPerformanceWarning: np.dot() is faster on contiguous arrays, called on (array(float64, 2d, A), array(float64, 1d, A))\n",
      "  return np.exp(-1j * np.dot(Q_vector, r))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The return type is: <class 'list'>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/thomasfarmer/Library/virtualenv/virtualenvpy3MDMC/lib/python3.6/site-packages/ase/io/cif.py:375: UserWarning: crystal system 'orthorhombic' is not interpreted for space group Spacegroup(61, setting=1). This may result in wrong setting!\n",
      "  setting_name, spacegroup))\n"
     ]
    }
   ],
   "source": [
    "from MDMC.readers.configurations import read\n",
    "atoms = read('data/Paracetamol.cif')\n",
    "\n",
    "# The return type of read is a list of atoms\n",
    "print('The return type is: {}'.format(type(atoms)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We can use this to create a Molecule\n",
    "from MDMC.MD import Molecule\n",
    "paracetamol = Molecule(atoms=atoms)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The paracetamol `Molecule` read from the CIF file can be visualized using the `view` function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from MDMC.gui import view\n",
    "view(paracetamol)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The display should show:\n",
    "\n",
    "![Display for paracetamol](../_static/images/gui_paracetamol.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this it appears that the configuration and topology has been correctly read; however, MDMC does not automatically determine if certain atoms or bonded interactions are equivalent.  For example, all three hydrogens in the methyl group are equivalent, as are the bonds, bond angles and dihedrals these hydrogens are involved in.  In the case of paracetamol, there are 20 bonds in total, however only 12 of them are unique."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of bonds: 20\n",
      "Number of uniquie bonds: 20\n"
     ]
    }
   ],
   "source": [
    "# To see all of the Bond interactions, we can filter the paracetamol interactions by name\n",
    "bonds = list(filter(lambda x: x.name == 'Bond', paracetamol.interactions))\n",
    "\n",
    "# There are 20 bonds in total\n",
    "print('Number of bonds: {}'.format(len(bonds)))\n",
    "\n",
    "# We can cast the list of bonds to a set to see the number of unique bonds - in this case it is still 20\n",
    "unique_bonds = set(bonds)\n",
    "print('Number of uniquie bonds: {}'.format(len(unique_bonds)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are two methods for specifying which atoms are equivalent; these can be seen by viewing the documentation relevant to the file format of the configuartion file, which can be accessed by passing `docstring=True` when calling `read`.  For example, with a CIF file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on method parse in module MDMC.readers.configurations.cif:\n",
      "\n",
      "parse(**settings) method of MDMC.readers.configurations.cif.CIF instance\n",
      "    Reads a configuration file and returns a list of `Atom` objects.\n",
      "    \n",
      "    These Atom objects can optionally have `Coulombic` interactions and also\n",
      "    `BondedInteraction` objects if bonded interactions are defined in the CIF\n",
      "    file.\n",
      "    \n",
      "    If `names` or `atom_types` is passed, then equivalent interactions\n",
      "    (`Coulombic` and `BondedInteraction`, if bonded interactions are defined in\n",
      "    the CIF file) will be initialized as a single object. For instance if the\n",
      "    CIF file includes a benzene ring, then as long as the correct `names` or\n",
      "    `atom_types` are passed, then there will only be a single C-C `Bond` object,\n",
      "    which will include all 6 of the atom pairs.\n",
      "    If both `names` and `atom_types` are passed, `atom_types` will be used to\n",
      "    group `Atom` objects.\n",
      "    If neither `names` or `atom_types` is passed then each interaction will\n",
      "    become a separate object.\n",
      "    \n",
      "    .. note:: Not all CIF files contain bonded interactions (it is only common\n",
      "    for biomolecules).\n",
      "    \n",
      "    .. note:: improper dihedrals are not explicitly defined in CIF, so these\n",
      "    must be set after initialization of `DihedralAngle` objects.\n",
      "    \n",
      "    .. note:: CIF reader cannot parse CIF files with user defined text sections,\n",
      "    so these must be stripped out before reading.\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    file : File, str\n",
      "        A `File` object, or the absolute file name of the configuration file\n",
      "    **settings\n",
      "        index : int, optional\n",
      "            The index of the configuration in the CIF file. Only a single\n",
      "            configuration can be read from a CIF file, with the default being\n",
      "            the first (index=0) configuration.\n",
      "        names : list of str\n",
      "            A list of names for the atoms in the CIF file. These names must have\n",
      "            the same order as the order the atoms in the file. A `name` must be\n",
      "            be provided for each atom in the CIF file.\n",
      "        atom_types : list of int\n",
      "            A list of int for atom types of the atoms in the CIF file. These\n",
      "            names must have the same order as the order the atoms in the file.\n",
      "            An `atom_type` must be provided for each atom in the CIF file.\n",
      "        cutoff : float\n",
      "            A distance (in Ang) at which the `Coulombic` interactions are\n",
      "            cutoff. If this is not passed, the `cutoff` will be set to 10.\n",
      "        add_bonds : bool, optional\n",
      "            Whether or not any bonded interactions defined in the CIF file will\n",
      "            be included. By default this is True.\n",
      "        add_charges : bool, optional\n",
      "            Whether or not each atom in the CIF file will be assigned a\n",
      "            `Coulombic` interaction with a `Coulomb` function. CIF files do not\n",
      "            contain charge information, so the charge of the `Coulombic`\n",
      "            interaction will be set to 0. This enables the charges to be set by\n",
      "            the application of a `ForceField` object. By default this is True.\n",
      "    \n",
      "    Returns\n",
      "    -------\n",
      "    list of Atom\n",
      "        The `Atom` objects corresponding to the data in the CIF file\n",
      "\n"
     ]
    }
   ],
   "source": [
    "read('Paracetamol.cif', docstring=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So it is possible to define equivalent atoms either by specifying the `name` of each `Atom` or the `atom_type` of each `Atom`.  **These names or atom types must be passed in the same order as the atoms are defined within the CIF file (i.e. in the \\_atom_site_label identifier).**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Equivalence specified by `atom_types`\n",
    "As with all `atom_types` specified in MDMC the integers used should be monotonically increasing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of bonds: 20\n",
      "Number of unique bonds: 12\n"
     ]
    }
   ],
   "source": [
    "# from MDMC.readers.configurations import read\n",
    "atoms = read('data/Paracetamol.cif', atom_types=[1, 2, # Oxygens\n",
    "                                           3, # Nitrogen\n",
    "                                           4, 5, 6, 7, 6, 6, 6, 8, # Carbons\n",
    "                                           9, 9, 9, 10, 10, 10, 10, 11, 12]) # Hydrogens\n",
    "paracetamol = Molecule(atoms=atoms)\n",
    "\n",
    "# Print the total number of bonds and the number of unique bonds\n",
    "bonds = list(filter(lambda x: x.name == 'Bond', paracetamol.interactions))\n",
    "print('Number of bonds: {}'.format(len(bonds)))\n",
    "print('Number of unique bonds: {}'.format(len(set(bonds))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Equivalence specified by `names`\n",
    "The `names` must be strings which are only shared by equivalent atoms.  These set the `name` attribute for each `Atom`.  As covered in the tutorial [Applying a Forcefield](applying-a-forcefield.ipynb), if each `Atom` has an `Atom.name` which is defined in a `ForceField`, the `ForceField` can be applied to set the `Parameter` values for all interactions.  An example of this is shown below, where the `names` provided are the OPLSAA atom types:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of bonds: 20\n",
      "Number of unique bonds: 12\n"
     ]
    }
   ],
   "source": [
    "# from MDMC.readers.configurations import read\n",
    "atoms = read('data/Paracetamol.cif', names=['109', '177', # Oxygens\n",
    "                                            '207', # Nitrogen\n",
    "                                            '208', '108', '90', '178', '90', '90', '90', '185', # Carbons\n",
    "                                            '85', '85', '85', '91', '91', '91', '91', '183', '110']) # Hydrogens\n",
    "paracetamol = Molecule(atoms=atoms)\n",
    "\n",
    "# Print the total number of bonds and the number of unique bonds\n",
    "bonds = list(filter(lambda x: x.name == 'Bond', paracetamol.interactions))\n",
    "print('Number of bonds: {}'.format(len(bonds)))\n",
    "print('Number of unique bonds: {}'.format(len(set(bonds))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The paracetamol can now be added to a `Universe` and the OPLSAA `ForceField` can be applied to set the `Parameter` values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from MDMC.MD import Universe\n",
    "universe = Universe(10.)\n",
    "universe.add_structural_unit(paracetamol)\n",
    "universe.add_force_field('OPLSAA')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The effect of this can be seen if we visualize the paracetamol molecule and select `View -> Charges` from the GUI menu bar."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "view(paracetamol)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Display for paracetamol with charges](../_static/images/gui_paracetamol_charges.png)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "py3MDMC",
   "language": "python",
   "name": "py3mdmc"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
