{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Running a Refinement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to refine potential parameters the following is required:\n",
    "\n",
    "- A `Universe` which contains one or more atoms. ([Building a Universe](building-a-universe.ipynb))\n",
    "- A `Simulation` which runs using the `Universe`. ([Running a Simulation](running-a-simulation.ipynb))\n",
    "- One or more `Parameters` to refine. ([Selecting fitting Parameters](selecting-fitting-parameters.ipynb))\n",
    "- One or more experimental datasets.\n",
    "\n",
    "For more information on how to produce the first three of these, please see the tutorials in the brackets."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Experimental datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Whether or not an experimental dataset can be refined against depends on:\n",
    "\n",
    "- if the relevant experimental `Observable` (e.g. dynamic structure factor, S(Q,w)) has been implemented.\n",
    "- if a `Reader` for the specific file format of the data has been implemented (e.g. LAMP output file format).\n",
    "\n",
    "If both of these exist, an experimental experimental dataset can be used.  If only the former has been implemented, then it would be necessary to add a subclass of the `ObservableReader` class to use the experimental dataset; more information about how to do is included within the `ObservableReader` documentation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each experimental dataset must be specified by a dictionary containing the following:\n",
    "\n",
    "- file_name : A string with the file name of the experimental data\n",
    "- type : A string specifying the type of `Observable` which describes the data (e.g. SQw if the data is the dynamic structure factor, PDF if the data is the pair distribution function).\n",
    "- reader : A string specifying the name of the `ObservableReader` which will be used to read the file.\n",
    "- weight : A float which determines the relative importance weighting of this dataset to other datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "QENS = {'file_name':'data/263K05Awat_LAMP',\n",
    "        'type':'SQw',\n",
    "        'reader':'LAMPSQw',\n",
    "        'weight':1.}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The specific manner in which the `weight` applies to calculating the Figure of Merit (FoM) depends on the particular FoM which is used for the refinement. By default this an error normalized least squares difference (`StandardFoMCalculator`):"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$FoM = \\sum_{i} w_{i} \\frac{F_{i}^{exp} - F_{i}^{sim}}{\\sigma_{i}^{exp}}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `exp_datasets` parameter which is passed to `Control` is a list of all dataset dictionaries.  In this instance there is only a single experimental dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "exp_datasets = [QENS]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If another dataset were to be included, for example the pair distribution function, this would require its own dictionary:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_diffraction = {'file_name':'data/water_PDF',\n",
    "                 'type':'PDF',\n",
    "                 'reader':'ASCII',\n",
    "                 'weight':0.5}\n",
    "two_exp_datasets = [QENS, n_diffraction]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Controlling the refinement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Continuing from the [Running a Simulation](running-a-simulation.ipynb) tutorial, using a `Universe` filled with SPCE water molecules.  As this minimizes and equilibrates a small simulation, it may take ~90s to execute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "# Run Running a Simulation notebook and hide output\n",
    "%run \"running-a-simulation.ipynb\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `Control` object sets up and runs the refinement (using `Control.refine`).  It uses the experimental datasets to refine the fitting `Parameters` for the specified `Simulation`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assuming a Universe called universe and a Simulation called simulation have been created\n",
    "from MDMC.control.control import Control\n",
    "\n",
    "universe = simulation.universe\n",
    "fit_params = universe.parameters\n",
    "\n",
    "control = Control(simulation=simulation,\n",
    "                  exp_datasets=exp_datasets,\n",
    "                  fit_params=fit_params,\n",
    "                  MC_norm=1,\n",
    "                  minimizer_type=\"MMC\",\n",
    "                  MD_steps=208000,\n",
    "                  t_resolution=114.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To refine the specified `fit_params`, pass the number of refinement steps to `Control.refine`.\n",
    "\n",
    "If 0 steps are passed, an MD simulation is performed, the simulation `Observable` is calculated, and the FoM is calculated, however the `fit_params` are not modified.  This can be used to determine the agreement between a simulation with the current `fit_params` and the experimental data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy.interpolate import interp2d\n",
    "exp_obs = control.observable_pairs[0].exp_obs\n",
    "Q_slice = slice(6, len(exp_obs.Q), 2)\n",
    "Q = exp_obs.Q[Q_slice]\n",
    "E_range = (exp_obs.E >=0)\n",
    "E = exp_obs.E[E_range]\n",
    "SQw = np.array([Sw[E_range] for Sw in exp_obs.SQw[Q_slice]])\n",
    "SQw_err = np.array([Sw_err[E_range] for Sw_err\n",
    "                    in exp_obs.SQw_err[Q_slice]])\n",
    "SQw_fun = interp2d(E, Q, SQw)\n",
    "SQw_err_zero = SQw_err\n",
    "SQw_err_zero[SQw_err == np.float('inf')] = 0\n",
    "SQw_err_fun = interp2d(E, Q, SQw_err_zero)\n",
    "# Use the largest step size from the E data for the uniform step size\n",
    "E_step = max([E[i] - E[i-1] for i in np.arange(len(E) - 1) + 1])\n",
    "# Currently forced to start from E = 0. due to limitations of SQw calculation\n",
    "E_uniform = np.arange(0., E[-1] - E[0], E_step )\n",
    "SQw_uniform = SQw_fun(E_uniform, Q)\n",
    "SQw_err_uniform = SQw_err_fun(E_uniform, Q)\n",
    "SQw_err_uniform[SQw_err_uniform == 0.] = np.float('inf')\n",
    "control.observable_pairs[0].exp_obs.independent_variables = {'E':E_uniform,\n",
    "                                                             'Q':Q}\n",
    "control.observable_pairs[0].exp_obs._dependent_variables = {'SQw':SQw_uniform}\n",
    "control.observable_pairs[0].exp_obs._errors = {'SQw':SQw_err_uniform}\n",
    "control.observable_pairs[0].MD_obs.independent_variables = {'E':E_uniform,\n",
    "                                                            'Q':Q}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "control.refine(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Observable Plotting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plotting software can be used to visualize the experimental and simulation `Observable` objects.  Here `matplotlib` is used to define a function for plotting the dynamic structure factor, `SQw`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook  \n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "def plot_SQw(Q, E, SQw)\n",
    "    fig = plt.figure()\n",
    "    ax = fig.gca(projection='3d')\n",
    "    X, Y = np.meshgrid(E, Q)\n",
    "    surf = ax.plot_surface(Q, E, SQw)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each comparable experimental and simulation `Observable` will be part of an `ObservablePair`.  These will have the same order as the `exp_datasets` that were passed to `Control`.  So the QENS experimental data will be part of the first (zero index) `ObservablePair`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "obs_pairs = control.observable_pairs\n",
    "QENS_pair = obs_pairs[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each `ObservablePair` must have an `Observable` from experimental data (`ObservablePair.exp_obs`) and an `Observable` from simulation ((`ObservablePair.MD_obs`).  In the case of the QENS `ObservablePair` (and other 2-D data), these can be plotted using the `plot_SQw` function defined above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "E = QENS_pair.exp_obs.E\n",
    "Q = QENS_pair.exp_obs.Q\n",
    "\n",
    "# Plot the experimental SQw\n",
    "plot_SQw(Q, E, QENS_pair.exp_obs.SQw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the simulation SQw\n",
    "plot_SQw(Q, E, QENS_pair.MD_obs.SQw)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "py3MDMC",
   "language": "python",
   "name": "py3mdmc"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
